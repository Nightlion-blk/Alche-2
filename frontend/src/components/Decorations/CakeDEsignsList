// src/components/CakeDesigns/CakeDesignsList.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useCakeContext } from '../../context/CakeContext';
import { 
  Edit, Trash2, Eye, Search, 
  SortAsc, SortDesc, Filter
} from 'lucide-react';

const CakeDesignsList = () => {
  const { getUserCakeDesigns } = useCakeContext();
  const [designs, setDesigns] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortOrder, setSortOrder] = useState('newest');
  const navigate = useNavigate();
  
  // Fetch designs on component mount
  useEffect(() => {
    const fetchDesigns = async () => {
      try {
        setLoading(true);
        const designsData = await getUserCakeDesigns();
        setDesigns(designsData);
        setError(null);
      } catch (err) {
        setError('Failed to load designs. Please try again.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    
    fetchDesigns();
  }, [getUserCakeDesigns]);
  
  // Sort and filter designs
  const filteredDesigns = designs
    .filter(design => 
      design.name.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .sort((a, b) => {
      if (sortOrder === 'newest') {
        return new Date(b.createdAt) - new Date(a.createdAt);
      } else if (sortOrder === 'oldest') {
        return new Date(a.createdAt) - new Date(b.createdAt);
      } else if (sortOrder === 'alphabetical') {
        return a.name.localeCompare(b.name);
      }
      return 0;
    });
  
  const handleViewDesign = (designId) => {
    navigate(`/cake-designer/${designId}`);
  };
  
  const handleEditDesign = (designId) => {
    navigate(`/cake-designer/edit/${designId}`);
  };
  
  const handleDeleteDesign = async (designId) => {
    // Implement delete functionality
    if (window.confirm('Are you sure you want to delete this design?')) {
      try {
        // API call to delete design
        // After successful deletion:
        setDesigns(designs.filter(design => design._id !== designId));
      } catch (err) {
        setError('Failed to delete design');
      }
    }
  };
  
  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-pink-500"></div>
      </div>
    );
  }
  
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">My Cake Designs</h1>
      
      {/* Search and filters */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="relative flex-grow">
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="Search designs..."
              className="w-full p-2 pl-10 border rounded"
            />
            <Search className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" />
          </div>
          
          <div className="flex gap-2">
            <select 
              className="p-2 border rounded"
              value={sortOrder}
              onChange={(e) => setSortOrder(e.target.value)}
            >
              <option value="newest">Newest First</option>
              <option value="oldest">Oldest First</option>
              <option value="alphabetical">A-Z</option>
            </select>
            
            <button 
              className="bg-pink-100 text-pink-800 p-2 rounded flex items-center gap-1"
              onClick={() => setSortOrder(sortOrder === 'newest' ? 'oldest' : 'newest')}
            >
              {sortOrder === 'newest' ? <SortDesc size={18} /> : <SortAsc size={18} />}
            </button>
          </div>
        </div>
      </div>
      
      {error && (
        <div className="bg-red-100 text-red-700 p-3 rounded mb-4">
          {error}
        </div>
      )}
      
      {/* Designs grid */}
      {filteredDesigns.length === 0 ? (
        <div className="text-center p-10 bg-gray-50 rounded-lg">
          <p className="text-gray-500">No cake designs found. Create your first design!</p>
          <button 
            onClick={() => navigate('/cake-designer')}
            className="mt-4 bg-pink-500 text-white px-4 py-2 rounded"
          >
            Create New Design
          </button>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredDesigns.map((design) => (
            <div key={design._id} className="bg-white rounded-lg shadow-md overflow-hidden">
              <div className="h-48 bg-gray-200 relative">
                {/* Cake design preview image would go here */}
                <div className="absolute inset-0 flex items-center justify-center text-gray-400">
                  {design.cakeModel ? "Cake Preview" : "No Preview Available"}
                </div>
              </div>
              
              <div className="p-4">
                <h3 className="font-semibold text-lg">{design.name}</h3>
                <p className="text-gray-600 text-sm truncate">{design.description || "No description"}</p>
                <p className="text-gray-500 text-xs mt-2">
                  Created: {new Date(design.createdAt).toLocaleDateString()}
                </p>
                
                <div className="flex justify-between mt-4">
                  <button 
                    onClick={() => handleViewDesign(design._id)}
                    className="text-blue-600 hover:text-blue-800 flex items-center gap-1"
                  >
                    <Eye size={16} /> View
                  </button>
                  
                  <button 
                    onClick={() => handleEditDesign(design._id)}
                    className="text-green-600 hover:text-green-800 flex items-center gap-1"
                  >
                    <Edit size={16} /> Edit
                  </button>
                  
                  <button 
                    onClick={() => handleDeleteDesign(design._id)}
                    className="text-red-600 hover:text-red-800 flex items-center gap-1"
                  >
                    <Trash2 size={16} /> Delete
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default CakeDesignsList;